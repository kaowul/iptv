SET(STREAMER_SERVICE_NAME ${STREAMER_NAME}_service)
SET(STREAMER_SERVICE_HOST "localhost:6317")
SET(STREAMER_SERVICE_HTTP_HOST "localhost:8000")
SET(STREAMER_SERVICE_NAME_EXE ${STREAMER_SERVICE_NAME}_s)

SET(DAEMONS_HEADERS_COMANDS_INFO
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/activate_info.h
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/license_info.h
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/stop_info.h
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/ping_info.h
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/server_info.h
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/prepare_info.h
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/get_log_info.h

  ${CMAKE_SOURCE_DIR}/src/server/commands_info/stream/stream_info.h
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/stream/start_info.h
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/stream/quit_status_info.h
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/stream/restart_info.h
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/stream/stop_info.h
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/stream/get_log_info.h
)

SET(DAEMONS_SOURCES_COMANDS_INFO
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/license_info.cpp
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/activate_info.cpp
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/stop_info.cpp
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/ping_info.cpp
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/server_info.cpp
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/prepare_info.cpp
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/service/get_log_info.cpp

  ${CMAKE_SOURCE_DIR}/src/server/commands_info/stream/stream_info.cpp
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/stream/start_info.cpp
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/stream/quit_status_info.cpp
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/stream/restart_info.cpp
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/stream/stop_info.cpp
  ${CMAKE_SOURCE_DIR}/src/server/commands_info/stream/get_log_info.cpp
)

SET(PIPE_HEADERS ${CMAKE_SOURCE_DIR}/src/server/pipe/pipe_client.h)
SET(PIPE_SOURCES ${CMAKE_SOURCE_DIR}/src/server/pipe/pipe_client.cpp)

SET(OPTIONS_HEADERS ${CMAKE_SOURCE_DIR}/src/server/options/options.h)
SET(OPTIONS_SOURCES ${CMAKE_SOURCE_DIR}/src/server/options/options.cpp)

FIND_PACKAGE(Common REQUIRED)
FIND_PACKAGE(JSON-C REQUIRED)

IF(OS_WINDOWS)
  SET(PLATFORM_HEADER)
  SET(PLATFORM_SOURCES)
  SET(PLATFORM_LIBRARIES)
  SET(RELATIVE_SOURCE_DIR .)
ELSEIF(OS_POSIX)
  SET(PLATFORM_HEADER)
  SET(PLATFORM_SOURCES)
  SET(PLATFORM_LIBRARIES pthread udev)
  SET(RELATIVE_SOURCE_DIR ..)
ENDIF(OS_WINDOWS)

SET(SERVER_HTTP_HEADERS
  ${CMAKE_SOURCE_DIR}/src/server/http/http_handler.h
  ${CMAKE_SOURCE_DIR}/src/server/http/http_client.h
  ${CMAKE_SOURCE_DIR}/src/server/http/http_server.h
)

SET(SERVER_HTTP_SOURCES
  ${CMAKE_SOURCE_DIR}/src/server/http/http_handler.cpp
  ${CMAKE_SOURCE_DIR}/src/server/http/http_client.cpp
  ${CMAKE_SOURCE_DIR}/src/server/http/http_server.cpp
)

SET(DAEMONS_HEADERS
  ${CMAKE_SOURCE_DIR}/src/server/child_stream.h
  ${CMAKE_SOURCE_DIR}/src/server/process_slave_wrapper.h
  ${CMAKE_SOURCE_DIR}/src/server/daemon_client.h
  ${CMAKE_SOURCE_DIR}/src/server/daemon_server.h
  ${CMAKE_SOURCE_DIR}/src/server/daemon_commands.h
  ${CMAKE_SOURCE_DIR}/src/server/stream_struct_utils.h
  ${CMAKE_SOURCE_DIR}/src/server/config.h

  ${SERVER_HTTP_HEADERS}
  ${DAEMONS_HEADERS_COMANDS_INFO}
)
SET(DAEMONS_SOURCES
  ${CMAKE_SOURCE_DIR}/src/server/child_stream.cpp
  ${CMAKE_SOURCE_DIR}/src/server/process_slave_wrapper.cpp
  ${CMAKE_SOURCE_DIR}/src/server/daemon_client.cpp
  ${CMAKE_SOURCE_DIR}/src/server/daemon_server.cpp
  ${CMAKE_SOURCE_DIR}/src/server/daemon_commands.cpp
  ${CMAKE_SOURCE_DIR}/src/server/stream_struct_utils.cpp
  ${CMAKE_SOURCE_DIR}/src/server/config.cpp

  ${SERVER_HTTP_SOURCES}
  ${DAEMONS_SOURCES_COMANDS_INFO}
)

SET(PERF_OBSERVER_HEADERS
  ${CMAKE_SOURCE_DIR}/src/server/gpu_stats/perf_monitor.h
)
SET(PERF_OBSERVER_SOURCES
  ${CMAKE_SOURCE_DIR}/src/server/gpu_stats/perf_monitor.cpp
)

# HARDWARE specific
SET(LICENSE_KEY "" CACHE STRING "Hardware specific key")
IF("${LICENSE_KEY}" STREQUAL "")
  MESSAGE(FATAL_ERROR "License key is empty, please use license_gen command to get key!")
ENDIF("${LICENSE_KEY}" STREQUAL "")

MESSAGE(STATUS "LICENSE_KEY: ${LICENSE_KEY}")

#gpu nvidia
SET(NVML_LIB_PATHS /usr/src/gdk/nvml/lib /usr/lib/nvidia-375)
SET(NVML_INCLUDE_PATHS /usr/include/nvidia/gdk /usr/local/cuda/include /usr/local/cuda-8.0/include)
FIND_LIBRARY(NVML_LIBRARY NAMES nvidia-ml PATHS ${NVML_LIB_PATHS})
FIND_PATH(NVML_INCLUDE_DIRS NAMES nvml.h PATHS ${NVML_INCLUDE_PATHS})
MESSAGE("NVML_LIBRARY: ${NVML_LIBRARY}, NVML_INCLUDE_DIRS: ${NVML_INCLUDE_DIRS}")
IF(NVML_LIBRARY AND NVML_INCLUDE_DIRS)
  SET(DAEMON_LIBRARIES ${DAEMON_LIBRARIES} ${NVML_LIBRARY})
  SET(PERF_OBSERVER_HEADERS ${PERF_OBSERVER_HEADERS} ${CMAKE_SOURCE_DIR}/src/server/gpu_stats/nvidia_monitor.h)
  SET(PERF_OBSERVER_SOURCES ${PERF_OBSERVER_SOURCES} ${CMAKE_SOURCE_DIR}/src/server/gpu_stats/nvidia_monitor.cpp)
  SET(PRIVATE_INCLUDE_DIRECTORIES_SLAVE ${PRIVATE_INCLUDE_DIRECTORIES_SLAVE} ${NVML_INCLUDE_DIRS})
  SET(PRIVATE_COMPILE_DEFINITIONS_SLAVE ${PRIVATE_COMPILE_DEFINITIONS_SLAVE} -DHAVE_NVML)

  # ibnvidia-ml.so.1
  GET_FILENAME_COMPONENT(NVML_LIBRARY_WITHOUT_SYMLINK ${NVML_LIBRARY} REALPATH)
  GET_FILENAME_COMPONENT(NVML_LIBRARY_NAME ${NVML_LIBRARY_WITHOUT_SYMLINK} NAME)
  STRING(REGEX REPLACE "[^so]+$" ".1" NVML_LNNAME ${NVML_LIBRARY_NAME})
  #libSDL2-2.0.so.0
  INSTALL(FILES ${NVML_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${NVML_LNNAME} COMPONENT RUNTIME)
ENDIF(NVML_LIBRARY AND NVML_INCLUDE_DIRS)

#gpu intel
SET(CTT_METRICS_PATH "/opt/intel/mediasdk/tools/metrics_monitor")
FIND_LIBRARY(CTT_METRICS_LIBRARY
  NAMES cttmetrics
  PATHS ${CTT_METRICS_PATH}
  PATH_SUFFIXES _bin
)
FIND_PATH(CTT_METRICS_INCLUDE_DIRS
  NAMES cttmetrics.h
  PATHS ${CTT_METRICS_PATH}
  PATH_SUFFIXES include
)
MESSAGE("CTT_METRICS_LIBRARY: ${CTT_METRICS_LIBRARY}, CTT_METRICS_INCLUDE_DIRS: ${CTT_METRICS_INCLUDE_DIRS}")
IF (CTT_METRICS_LIBRARY AND CTT_METRICS_INCLUDE_DIRS)
  SET(DAEMON_LIBRARIES ${DAEMON_LIBRARIES} ${CTT_METRICS_LIBRARY})
  SET(PERF_OBSERVER_HEADERS ${PERF_OBSERVER_HEADERS} ${CMAKE_SOURCE_DIR}/src/server/gpu_stats/intel_monitor.h)
  SET(PERF_OBSERVER_SOURCES ${PERF_OBSERVER_SOURCES} ${CMAKE_SOURCE_DIR}/src/server/gpu_stats/intel_monitor.cpp)
  SET(PRIVATE_INCLUDE_DIRECTORIES_SLAVE ${PRIVATE_INCLUDE_DIRECTORIES_SLAVE} ${CTT_METRICS_INCLUDE_DIRS})
  SET(PRIVATE_COMPILE_DEFINITIONS_SLAVE ${PRIVATE_COMPILE_DEFINITIONS_SLAVE} -DHAVE_CTT_METRICS)
  INSTALL(FILES ${CTT_METRICS_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)
ENDIF(CTT_METRICS_LIBRARY AND CTT_METRICS_INCLUDE_DIRS)

SET(DAEMON_SOURCES
  ${DAEMONS_HEADERS} ${DAEMONS_SOURCES}
  ${PERF_OBSERVER_HEADERS} ${PERF_OBSERVER_SOURCES}
  ${PIPE_HEADERS} ${PIPE_SOURCES}
  ${OPTIONS_HEADERS} ${OPTIONS_SOURCES}
)
SET(DAEMON_LIBRARIES
  ${DAEMON_LIBRARIES}
  ${COMMON_LIBRARIES}
  ${JSONC_LIBRARIES}
  ${PLATFORM_LIBRARIES}
  dl
  ${STREAMER_COMMON} #FIXME
)
SET(PRIVATE_INCLUDE_DIRECTORIES_SLAVE
  ${PRIVATE_INCLUDE_DIRECTORIES_SLAVE}
  ${CMAKE_SOURCE_DIR}/src
)
SET(CORE_LIBRARY ${LIB_INSTALL_DESTINATION}/${CMAKE_SHARED_LIBRARY_PREFIX}${STREAMER_CORE}${CMAKE_SHARED_LIBRARY_SUFFIX})

SET(RUN_DIR_PATH "/var/run/${STREAMER_SERVICE_NAME}")
SET(PIDFILE_PATH "${RUN_DIR_PATH}/${STREAMER_SERVICE_NAME}.pid")
SET(USER_NAME ${PROJECT_NAME_LOWERCASE})
SET(USER_GROUP ${PROJECT_NAME_LOWERCASE})

SET(PRIVATE_COMPILE_DEFINITIONS_SLAVE
  ${PRIVATE_COMPILE_DEFINITIONS_SLAVE}
  -DUSER_NAME="${USER_NAME}"
  -DUSER_GROUP="${USER_GROUP}"
  -DCONFIG_SLAVE_FILE_PATH="/etc/${STREAMER_SERVICE_NAME}.conf"
  -DLICENSE_KEY="${LICENSE_KEY}"
  -DPIDFILE_PATH="${PIDFILE_PATH}"
  -DCORE_LIBRARY="${CORE_LIBRARY}"
  -DPIDFILE_PATH="${PIDFILE_PATH}"
  -DSTREAMER_NAME="${STREAMER_NAME}"
  -DSTREAMER_SERVICE_NAME="${STREAMER_SERVICE_NAME}"
  -DRELATIVE_SOURCE_DIR="${RELATIVE_SOURCE_DIR}"
)

SET(EXE_DAEMON_SOURCES ${CMAKE_SOURCE_DIR}/src/server/daemon_slave.cpp)

ADD_EXECUTABLE(${STREAMER_SERVICE_NAME_EXE}
  ${DAEMON_SOURCES} ${EXE_DAEMON_SOURCES}
)
TARGET_INCLUDE_DIRECTORIES(${STREAMER_SERVICE_NAME_EXE} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_SLAVE})
TARGET_COMPILE_DEFINITIONS(${STREAMER_SERVICE_NAME_EXE} PRIVATE ${PRIVATE_COMPILE_DEFINITIONS_SLAVE})
TARGET_LINK_LIBRARIES(${STREAMER_SERVICE_NAME_EXE} ${DAEMON_LIBRARIES})

IF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
  STRIP_TARGET(${STREAMER_SERVICE_NAME_EXE})
ENDIF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
INSTALL(TARGETS ${STREAMER_SERVICE_NAME_EXE} DESTINATION ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS)

SET(EXECUTABLE_FOLDER_PATH /usr/local/bin)

IF(OS_WINDOWS)
ELSEIF(OS_MACOSX)
ELSEIF(OS_LINUX)
  SET(EXECUTABLE_PATH ${EXECUTABLE_FOLDER_PATH}/${STREAMER_SERVICE_NAME} CACHE INTERNAL "Daemon path: ${EXECUTABLE_PATH}")
ENDIF(OS_WINDOWS)

# script
SET(SERVICE_START_SCRIPT_GEN_PATH ${CMAKE_BINARY_DIR}/service/${STREAMER_SERVICE_NAME})
GEN_START_SCRIPT(${SERVICE_START_SCRIPT_GEN_PATH} ${STREAMER_SERVICE_NAME_EXE})
INSTALL(PROGRAMS ${SERVICE_START_SCRIPT_GEN_PATH} DESTINATION
  ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS
)

# service
SET(SERVICE_SCRIPT_GEN_PATH ${CMAKE_BINARY_DIR}/service/${STREAMER_SERVICE_NAME}.service)
GEN_SERVICE_SERVICE_FILE(${SERVICE_SCRIPT_GEN_PATH}
  ${STREAMER_SERVICE_NAME} ${STREAMER_SERVICE_NAME_EXE}
  ${EXECUTABLE_PATH}
  ${RUN_DIR_PATH}
  ${PIDFILE_PATH}
  ${USER_NAME} ${USER_GROUP}
  ${PROJECT_SUMMARY}
)
INSTALL(FILES ${SERVICE_SCRIPT_GEN_PATH} DESTINATION /etc/systemd/system/)

SET(SERVICE_DEB_SCRIPT_GEN_PATH ${CMAKE_BINARY_DIR}/service/${STREAMER_SERVICE_NAME}.debian)
GEN_DEBIAN_SERVICE_FILE(${SERVICE_DEB_SCRIPT_GEN_PATH}
  ${STREAMER_SERVICE_NAME} ${STREAMER_SERVICE_NAME_EXE}
  ${EXECUTABLE_PATH}
  ${RUN_DIR_PATH}
  ${PIDFILE_PATH}
  ${USER_NAME} ${USER_GROUP}
  ${PROJECT_SUMMARY}
)
INSTALL(FILES ${SERVICE_DEB_SCRIPT_GEN_PATH}
  DESTINATION /etc/init.d
  RENAME ${STREAMER_SERVICE_NAME}
  PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

SET(SERVICE_CONF_GEN_PATH ${CMAKE_BINARY_DIR}/service/${STREAMER_SERVICE_NAME}.conf)
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/service/service.conf.in
  ${SERVICE_CONF_GEN_PATH} @ONLY IMMEDIATE
)
IF(NOT EXISTS "/etc/${STREAMER_SERVICE_NAME}.conf")
  INSTALL(FILES ${SERVICE_CONF_GEN_PATH} DESTINATION /etc/)
ENDIF(NOT EXISTS "/etc/${STREAMER_SERVICE_NAME}.conf")

IF (DEVELOPER_CHECK_STYLE)
  SET(CHECK_SOURCES_DAEMON ${DAEMON_SOURCES} ${EXE_DAEMON_SOURCES})
  REGISTER_CHECK_STYLE_TARGET(check_style_${STREAMER_SERVICE_NAME} "${CHECK_SOURCES_DAEMON}")
  REGISTER_CHECK_INCLUDES_TARGET(${STREAMER_SERVICE_NAME_EXE})
ENDIF(DEVELOPER_CHECK_STYLE)


IF(DEVELOPER_ENABLE_TESTS)
  FIND_PACKAGE(GTest REQUIRED)

  ## Unit tests
  SET(PRIVATE_INCLUDE_DIRECTORIES_UNIT_TESTS
    ${PRIVATE_INCLUDE_DIRECTORIES_UNIT_TESTS}
    ${CMAKE_SOURCE_DIR}/src
    ${GSTREAMER_INCLUDE_DIR}
    ${GLIB_INCLUDE_DIR}
    ${GLIBCONFIG_INCLUDE_DIR}
  )
  SET(UNIT_TESTS_LIBS
      ${GTEST_BOTH_LIBRARIES}
      ${STREAMER_COMMON}
      ${PLATFORM_LIBRARIES})
  SET(UNIT_TESTS unit_tests_server)
  ADD_EXECUTABLE(${UNIT_TESTS}
    ${CMAKE_SOURCE_DIR}/tests/server/unit_test_server.cpp ${OPTIONS_SOURCES}
  )
  TARGET_INCLUDE_DIRECTORIES(${UNIT_TESTS} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_UNIT_TESTS} ${JSONC_INCLUDE_DIRS})
  TARGET_LINK_LIBRARIES(${UNIT_TESTS} ${UNIT_TESTS_LIBS} ${DAEMON_LIBRARIES})
  ADD_TEST_TARGET(${UNIT_TESTS})
  SET_PROPERTY(TARGET ${UNIT_TESTS} PROPERTY FOLDER "Unit tests")
ENDIF(DEVELOPER_ENABLE_TESTS)
